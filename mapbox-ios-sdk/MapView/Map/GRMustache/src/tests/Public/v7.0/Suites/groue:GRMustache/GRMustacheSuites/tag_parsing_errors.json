{
  "tests": [
    {
      "name": "Variable tags must be closed.",
      "data": null,
      "template": "\n{{\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      // Regression test: parser used to choke on '}' at the end of the
      // template string.
      "name": "Variable tags must be closed.",
      "data": null,
      "template": "\n{{\n}",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Triple mustache tags must be closed.",
      "data": null,
      "template": "\n{{{#\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Unescaped variable tags must be closed.",
      "data": null,
      "template": "\n{{&\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Section tags must be closed.",
      "data": null,
      "template": "\n{{#\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Inverted section tags must be closed.",
      "data": null,
      "template": "\n{{^\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Inheritable section tags must be closed.",
      "data": null,
      "template": "\n{{$\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Partial tags must be closed.",
      "data": null,
      "template": "\n{{>\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Comment tags must be closed.",
      "data": null,
      "template": "\n{{!\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Set delimiter tags must be closed.",
      "data": null,
      "template": "\n{{=\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Pragma tags must be closed.",
      "data": null,
      "template": "\n{{%\n",
      "expected_error": "Parse error.*line 2\\b.*Unclosed Mustache tag"
    },
    {
      "name": "Variable tags can not be empty.",
      "data": null,
      "template": "\n{{}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Variable tags can not be blank.",
      "data": null,
      "template": "\n{{ \n\t}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Triple mustache tags can not be empty.",
      "data": null,
      "template": "\n{{{}}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Triple mustache tags can not be blank.",
      "data": null,
      "template": "\n{{{ \n\t}}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Unescaped variable tags can not be empty.",
      "data": null,
      "template": "\n{{&}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Unescaped variable tags can not be blank.",
      "data": null,
      "template": "\n{{& \n\t}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Section tags can not be empty.",
      "data": null,
      "template": "\n{{#}}\n{{/}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Section tags can not be blank.",
      "data": null,
      "template": "\n{{# \n\t}}\n{{/ \n\t}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Inverted section tags can not be empty.",
      "data": null,
      "template": "\n{{^}}\n{{/}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Inverted section can not be blank.",
      "data": null,
      "template": "\n{{^ \n\t}}\n{{/ \n\t}}",
      "expected_error": "Parse error.*line 2\\b.*Missing expression"
    },
    {
      "name": "Inheritable section names can not be empty.",
      "data": null,
      "template": "\n{{$}}\n{{/}}",
      "expected_error": "Parse error.*line 2\\b.*Missing inheritable section name"
    },
    {
      "name": "Inheritable section names can not contain white space.",
      "data": null,
      "template": "\n{{$ a b }}\n{{/ a b }}",
      "expected_error": "Parse error.*line 2\\b.*Invalid inheritable section name"
    },
    {
      "name": "Inheritable section names can not be blank.",
      "data": null,
      "template": "\n{{$ \n\t}}\n{{/ \n\t}}",
      "expected_error": "Parse error.*line 2\\b.*Missing inheritable section name"
    },
    {
      "name": "Partial tags can not be empty.",
      "data": null,
      "template": "\n{{>}}",
      "expected_error": "Parse error.*line 2\\b.*Missing template name"
    },
    {
      "name": "Partial can not be blank.",
      "data": null,
      "template": "\n{{> \n\t}}",
      "expected_error": "Parse error.*line 2\\b.*Missing template name"
    },
    {
      "name": "Quadruple mustaches yield a parse error.",
      "data": null,
      "template": "\n{{{{foo}}}}",
      "expected_error": "Parse error.*line 2\\b"
    },
    {
      "name": "Section tag must be closed.",
      "data": null,
      "template": "\n{{#a}}",
      "expected_error": "Parse error.*line 2\\b"
    },
    {
      "name": "Closing section tag which contain an expression must match the opening tag.",
      "data": null,
      "template": "\n{{#a}}\n{{/b}}",
      "expected_error": "Parse error.*line 3\\b"
    },
    {
      "name": "Closing section tag which contain an expression must match the opening tag.",
      "data": null,
      "template": "\n{{#a(b)}}\n{{/a}}",
      "expected_error": "Parse error.*line 3\\b"
    },
    {
      "name": "Closing section tag which contain an expression must match the opening tag.",
      "data": null,
      "template": "\n{{#a}}\n{{/a(b)}}",
      "expected_error": "Parse error.*line 3\\b"
    },
    {
      "name": "Closing section tag which contain an expression must match the opening tag.",
      "data": null,
      "template": "\n{{#a.b}}\n{{/a}}",
      "expected_error": "Parse error.*line 3\\b"
    },
    {
      "name": "Closing section tag which contain an expression must match the opening tag.",
      "data": null,
      "template": "\n{{#a}}\n{{/a.b}}",
      "expected_error": "Parse error.*line 3\\b"
    },
    {
      "name": "Partial name must not contain any white space character.",
      "data": null,
      "template": "{{> a b }}",
      "expected_error": "Parse error.*line 1\\b"
    },
    {
      "name": "Partial name must not contain any white space character.",
      "data": null,
      "template": "{{> a\rb }}",
      "expected_error": "Parse error.*line 1\\b"
    },
    {
      "name": "Partial name must not contain any white space character.",
      "data": null,
      "template": "{{> a\nb }}",
      "expected_error": "Parse error.*line 1\\b"
    },
    {
      "name": "Partial name must not contain any white space character.",
      "data": null,
      "template": "{{> a\tb }}",
      "expected_error": "Parse error.*line 1\\b"
    }
  ]
}
